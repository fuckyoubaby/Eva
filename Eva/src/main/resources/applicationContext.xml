<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

<!-- 引入属性文件 -->
	<context:property-placeholder location="classpath:config.properties" />

	<!-- 自动扫描dao和service包(自动注入) -->
	<context:component-scan base-package="com.changhong" />
	
	<!-- 在spring中配置ehcache -->
	<!-- <bean id="cacheManagerEhcache" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation">
			<value>classpath:ehcache.xml</value>
		</property>
		 由于hibernate也使用了Ehcache, 保证双方都使用同一个缓存管理器
        <property name="shared" value="true"/>
	</bean> -->
	<!-- 配置数据源 -->
	<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="url" value="${jdbc_url}" />
		<property name="username" value="${jdbc_username}" />
		<property name="password" value="${jdbc_password}" />

		<!-- 初始化连接大小 -->
		<property name="initialSize" value="0" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="20" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="0" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />

		<!-- <property name="poolPreparedStatements" value="true" /> <property name="maxPoolPreparedStatementPerConnectionSize" value="33" /> -->

		<property name="validationQuery" value="${validationQuery}" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />

		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />

		<!-- 监控数据库 -->
		<!-- <property name="filters" value="stat" /> -->
		<property name="filters" value="mergeStat" />
	</bean>

	 <bean id="xgerpDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="maxPoolSize"><value>20</value></property>
		<property name="minPoolSize"><value>0</value></property>
		<property name="maxIdleTime"><value>1800</value></property>
		<property name="acquireIncrement"><value>5</value></property>
		<property name="driverClass"><value>com.mysql.jdbc.Driver</value></property>
		<property name="jdbcUrl"><value>${jdbc_url}</value></property>
		<property name="user"><value>${jdbc_username}</value></property>
		<property name="password"><value>${jdbc_password}</value></property>
		<property name="maxStatements"><value>0</value></property>
		<property name="idleConnectionTestPeriod"><value>120</value></property>
		<property name="acquireRetryAttempts"><value>30</value></property>
		<property name="breakAfterAcquireFailure"><value>true</value></property>
		<property name="testConnectionOnCheckout"><value>false</value></property>
	</bean>  
	<!-- 配置hibernate session工厂 -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				
				<!-- 下面是配置ehcache缓存 -->
				<!-- <prop key="hibernate.cache.use_query_cache">true</prop>
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
				<prop key="hibernate.cache.reginon.factory_class">org.hibernate.cache.ehcache.SingletonEhCacheRegionFactory</prop> -->
			</props>
		</property>

		<!-- 自动扫描注解方式配置的hibernate类文件 -->
		<property name="packagesToScan">
			<list>
				<value>com.changhong.entities</value>
			</list>
		</property>

		<!-- 自动扫描hbm方式配置的hibernate文件和.hbm文件 -->
		<!-- 
		<property name="mappingDirectoryLocations">
			<list>
				<value>classpath:sy/hbm</value>
			</list>
		</property>
		 -->
		<property name="annotatedClasses">
			<list>
			<value>com.changhong.entities.Classify</value>
			<value>com.changhong.entities.Experience</value>
			<value>com.changhong.entities.Job</value>
			<value>com.changhong.entities.Mode</value>
			<value>com.changhong.entities.Train</value>
			<value>com.changhong.entities.Project</value>
			<value>com.changhong.entities.Review</value>
			<value>com.changhong.entities.Exam</value>
			<value>com.changhong.entities.Department</value>
			<value>com.changhong.entities.Phase</value>
			<value>com.changhong.entities.Problemmode</value>
			<value>com.changhong.entities.Employee</value>
			<value>com.changhong.entities.Employeeexamr</value>
			<value>com.changhong.entities.Employeetrainr</value>
			<value>com.changhong.entities.Problemstate</value>
			<value>com.changhong.entities.Problem</value>
			<value>com.changhong.entities.Communication</value>
			<value>com.changhong.entities.Employeeprojectr</value>
			<value>com.changhong.entities.Problemtype</value>
			<value>com.changhong.entities.Employeemoder</value>
			<value>com.changhong.entities.DataDirt</value>
			<value>com.changhong.entities.Result</value>
			<value>com.changhong.entities.Comprehensive</value>
			<value>com.changhong.entities.Modeproblemmoder</value>
			<value>com.changhong.entities.Modecomprehensive</value>
			<value>com.changhong.entities.Overallscore</value>
			<value>com.changhong.entities.Trainorg</value>
			<value>com.changhong.entities.Order</value>
			<value>com.changhong.entities.Patent</value>
			<value>com.changhong.entities.Assist</value>
			<value>com.changhong.entities.Secondlevelscore</value>
			<value>com.changhong.entities.Secondweight</value>
			<value>com.changhong.entities.Projectreview</value>
			<value>com.changhong.entities.Comment</value></list>
		</property></bean>

	<!-- 开启AOP监听 只对当前配置文件有效 -->
	<aop:aspectj-autoproxy expose-proxy="true" />
	<!-- 配置Hibernate事务管理器 -->
    <bean id="transactionManager"
        class="org.springframework.orm.hibernate4.HibernateTransactionManager">
      <property name="sessionFactory" ref="sessionFactory" />
   </bean>
   
   <!-- 配置事务异常封装 -->
   <bean id="persistenceExceptionTranslationPostProcessor" 
       class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />
   
   <!--  声明式容器事务管理 ,transaction-manager指定事务管理器为transactionManager -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
			 <tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="merge*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="put*" propagation="REQUIRED" />
			<tx:method name="use*" propagation="REQUIRED" />
			<tx:method name="get*" propagation="REQUIRED" />
			<tx:method name="count*" propagation="REQUIRED" read-only="true" />
			<tx:method name="find*" propagation="REQUIRED" read-only="true" />
			<tx:method name="list*" propagation="REQUIRED" read-only="true" />

        </tx:attributes>
    </tx:advice>
    <!-- 开启注解事务 只对当前配置文件有效 -->
   <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/> 
    <aop:config >
        <!-- 只对业务逻辑层实施事务 -->
        <aop:pointcut id="txPointcut" expression="execution(* com.changhong.service.*.*(..))" />
        <!-- Advisor定义，切入点和通知分别为txPointcut、txAdvice -->
        <aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice"/>
    </aop:config>
	
   </beans>